@page "/fetchdatagrpcstream"
@inject WeatherForecastService.WeatherForecastServiceClient WeatherForecastServiceClient
@using System.Threading;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the gRPC service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IList<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = new List<WeatherForecast>()
;        var cts = new CancellationTokenSource(TimeSpan.FromSeconds(50));
        using var streamingCall = WeatherForecastServiceClient.GetWeatherStream(new Empty(), cancellationToken: cts.Token);

        try
        {
            await Task.Delay(500);
            while (await streamingCall.ResponseStream.MoveNext(cancellationToken: cts.Token))
            {
                forecasts.Add(streamingCall.ResponseStream.Current);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Stream cancelled.");
        }

    }

}